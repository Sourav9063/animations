{
  "jsx": "'use client'\nimport React, { useState } from 'react';\nimport style from './stars.module.css';\n\nlet ratio = window.innerHeight / window.innerWidth;\n\nconst getRandomStarPlacement = (starsCount) => {\n  const stars = [];\n  for (let i = 0; i < starsCount; i++) {\n    const star = {\n      top: Math.floor(Math.random() * 100),\n      left: Math.floor(Math.random() * 100),\n      opacity: Math.random() * 0.6 + 0.2,\n      size: Math.floor(Math.random() * 18) + 2,\n      backgroundColor: `hsl(${\n        Math.floor(Math.random() * 100) + 240\n      }, 100%, 50%)`,\n      animationDelay: Math.floor(Math.random() * 20) + 's',\n      animationDuration: Math.floor(Math.random() * 10) + 10 + 's',\n    };\n    stars.push(star);\n  }\n  return stars;\n};\n\nconst distance = (x1, y1, x2, y2) => {\n  return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n};\nconst move = (x1, y1, x2, y2, r) => {\n  const angle = Math.atan2(y1 - y2, x1 - x2);\n  const newX = x1 - Math.cos(angle) * r;\n  const newY = y1 - Math.sin(angle) * r;\n  return {\n    newX,\n    newY,\n  };\n};\n\nlet stars = [];\nstars = getRandomStarPlacement(ratio > 1 ? 300 : 375);\nconst percent = ratio > 1 ? 12 : 15;\nconst distConst = Math.max(percent * ratio * (percent * ratio), 255);\n\nexport default function Stars() {\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  return (\n    <div\n      className={style.body}\n      onMouseMove={(e) => {\n        const rect = e.target.getBoundingClientRect();\n        let xtmp = e.clientX - rect.left;\n        let ytmp = e.clientY - rect.top;\n        xtmp = (xtmp / rect.width) * 100;\n        ytmp = (ytmp / rect.height) * 100;\n        if (Math.abs(xtmp - x) > 1 || Math.abs(ytmp - y) > 1) {\n          setX(xtmp);\n          setY(ytmp);\n        }\n      }}\n      onTouchMove={(e) => {\n        const rect = e.target.getBoundingClientRect();\n        let xtmp = e.touches[0].clientX - rect.left;\n        let ytmp = e.touches[0].clientY - rect.top;\n        xtmp = (xtmp / rect.width) * 100;\n        ytmp = (ytmp / rect.height) * 100;\n        if (Math.abs(xtmp - x) > 1 || Math.abs(ytmp - y) > 1) {\n          setX(xtmp);\n          setY(ytmp);\n        }\n      }}\n    >\n      <div className={style.debug}>\n        <p>x={x}</p>\n        <p>y={y}</p>\n        <p>ratio:{ratio}</p>\n      </div>\n      {stars.map((star, index) => {\n        return (\n          <div\n            key={index}\n            className={style.star}\n            style={{\n              '--opacity': star.opacity,\n              backgroundColor: star.backgroundColor,\n              left:\n                distance(x, y, star.left, star.top) <\n                (ratio <= 1 ? distConst * ratio : distConst)\n                  ? move(\n                      x,\n                      y,\n                      star.left,\n                      star.top,\n                      ratio <= 1\n                        ? Math.sqrt(distConst) * ratio\n                        : Math.sqrt(distConst)\n                    ).newX + '%'\n                  : star.left + '%',\n              top:\n                distance(x, y, star.left, star.top) <\n                (ratio >= 1 ? distConst / ratio : distConst)\n                  ? move(\n                      x,\n                      y,\n                      star.left,\n                      star.top,\n                      ratio >= 1\n                        ? Math.sqrt(distConst) / ratio\n                        : Math.sqrt(distConst)\n                    ).newY + '%'\n                  : star.top + '%',\n              opacity:\n                distance(x, y, star.left, star.top) <\n                (ratio >= 1 ? distConst / ratio : distConst)\n                  ? 1\n                  : star.opacity,\n              animation:\n                distance(x, y, star.left, star.top) <\n                (ratio >= 1 ? distConst / ratio : distConst)\n                  ? 'none'\n                  : `${style.starAni} ${star.animationDuration} ease ${star.animationDelay} infinite alternate`,\n              width: star.size + 'px',\n              height: star.size + 'px',\n            }}\n          />\n        );\n      })}\n    </div>\n  );\n}",
  "css": ".body {\n  width: 100vw;\n  height: 100vh;\n  height: 100dvh;\n  background-color: black;\n  position: relative;\n  overflow: hidden;\n}\n\n.star {\n  position: absolute;\n  /* background-color: hsl(257, 100%, 50%); */\n  border-radius: 50%;\n  /* width: 10px;\n  height: 10px; */\n  animation: starAni 30s ease infinite alternate;\n  transition: all 400ms ease-out;\n  opacity: 0;\n}\n\n.debug {\n  display: none;\n  color: white;\n  position: fixed;\n  top: 10px;\n  left: 10px;\n}\n\n@keyframes starAni {\n  0% {\n\n      opacity: var(--opacity);\n  }\n\n  40% {\n      opacity: .2;\n\n  }\n\n  60% {\n\n      opacity: .2;\n  }\n\n  100% {\n      opacity: var(--opacity);\n\n\n  }\n}\n\n/*  cubic-bezier(0.52, 0.22, 0.86, 0.37) */"
}
